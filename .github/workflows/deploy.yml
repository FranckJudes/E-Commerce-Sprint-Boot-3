name: üöÄ Build & Deploy Microservices

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    name: üèóÔ∏è Build et Push sur Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: üöö Get latest code
        uses: actions/checkout@v3

      - name: üì¶ Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven

      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build Config Server
      - name: üèóÔ∏è Build and push Config Server
        working-directory: ./services/config-server
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-config-server:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-config-server:latest

      # Build Discovery Service
      - name: üèóÔ∏è Build and push Discovery Service
        working-directory: ./services/discovery
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-discovery:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-discovery:latest

      # Build API Gateway
      - name: üèóÔ∏è Build and push API Gateway
        working-directory: ./services/gateway
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-gateway:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-gateway:latest

      # Build Customer Service
      - name: üèóÔ∏è Build and push Customer Service
        working-directory: ./services/customer
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-customer:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-customer:latest

      # Build Product Service
      - name: üèóÔ∏è Build and push Product Service
        working-directory: ./services/Product
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-product:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-product:latest

      # Build Order Service
      - name: üèóÔ∏è Build and push Order Service
        working-directory: ./services/order
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-order:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-order:latest

      # Build Finance Service
      - name: üèóÔ∏è Build and push Finance Service
        working-directory: ./services/finances
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-finances:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-finances:latest

      # Build Notification Service
      - name: üèóÔ∏è Build and push Notification Service
        working-directory: ./services/notification
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-notification:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-notification:latest

  prepare-server:
    name: üõ†Ô∏è Pr√©paration du serveur
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: üöö Get latest code
        uses: actions/checkout@v3

      - name: üõ†Ô∏è Prepare Remote Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            # Mise √† jour et installation des d√©pendances
            sudo apt update -y
            sudo apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg tar

            # Installer Docker si absent
            if ! command -v docker &> /dev/null; then
              echo "Installation de Docker..."
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt update -y
              sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi

            # V√©rifier docker compose plugin
            if ! docker compose version &> /dev/null; then
              echo "Installation de Docker Compose Plugin..."
              sudo apt install -y docker-compose-plugin
            fi
            
            # Cr√©er le r√©pertoire cible et donner les bonnes permissions
            sudo mkdir -p ${{ secrets.TARGET_DIR }}
            sudo chown -R $USER:$USER ${{ secrets.TARGET_DIR }}
            sudo chmod -R 755 ${{ secrets.TARGET_DIR }}
            echo "R√©pertoire ${{ secrets.TARGET_DIR }} cr√©√© avec les bonnes permissions"

  copy-config:
    name: üìÇ Copie des fichiers de configuration
    needs: prepare-server
    runs-on: ubuntu-latest
    steps:
      - name: üöö Get latest code
        uses: actions/checkout@v3

      # V√©rifier et pr√©parer les fichiers de configuration
      - name: üìÇ V√©rifier les fichiers de configuration
        run: |
          ls -la
          if [ -f "docker-compose.yml" ]; then
            echo "‚úÖ docker-compose.yml trouv√©"
            chmod 644 docker-compose.yml
          else
            echo "‚ùå docker-compose.yml introuvable dans le d√©p√¥t!"
            exit 1
          fi
          
          if [ -f ".env" ]; then
            echo "‚úÖ .env trouv√©"
            chmod 644 .env
          else
            echo "‚ùå .env introuvable dans le d√©p√¥t!"
            # Cr√©er un fichier .env √† partir des secrets
            echo "Cr√©ation d'un fichier .env √† partir des secrets..."
            echo "DB_USER=${{ secrets.DB_USER }}" > .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            # Ajoutez d'autres variables selon vos besoins
            chmod 644 .env
          fi

      # Copier directement les fichiers sans utiliser tar
      - name: üìÇ Copier les fichiers de configuration via SCP
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Le r√©pertoire cible est: ${{ secrets.TARGET_DIR }}"
            ls -la ${{ secrets.TARGET_DIR }}

      - name: üìÑ Copier docker-compose.yml
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "${{ secrets.TARGET_DIR }}"
          overwrite: true

      - name: üìÑ Copier .env
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ".env"
          target: "${{ secrets.TARGET_DIR }}"
          overwrite: true

      - name: üëÅÔ∏è V√©rifier les fichiers sur le serveur
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.TARGET_DIR }}
            ls -la
            if [ ! -f "docker-compose.yml" ] || [ ! -f ".env" ]; then
              echo "Erreur: Fichiers manquants sur le serveur!"
              exit 1
            else
              echo "Les fichiers ont √©t√© copi√©s avec succ√®s!"
            fi

  deploy:
    name: üöÄ D√©ploiement des services
    needs: copy-config
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Deploy Services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            cd ${{ secrets.TARGET_DIR }}
            
            # V√©rifier que les fichiers ont bien √©t√© copi√©s
            if [ ! -f "docker-compose.yml" ]; then
              echo "Erreur : docker-compose.yml manquant sur le serveur!"
              exit 1
            fi
            
            if [ ! -f ".env" ]; then
              echo "Erreur : .env manquant sur le serveur!"
              exit 1
            fi

            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

            # Arr√™ter et supprimer les conteneurs existants si n√©cessaire
            docker compose down || true
            
            # T√©l√©charger les images et d√©marrer les services
            docker compose pull || { echo "Erreur lors du pull des images"; exit 1; }
            docker compose up -d || { echo "Erreur lors du d√©ploiement"; exit 1; }

            # Afficher l'√©tat des services
            docker compose ps
            docker compose logs --tail=50