name: 🚀 Build & Deploy Microservices

on:
  push:
    branches: [ main ]

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}

jobs:
  build-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: config-server
            image: ecommerce-config-server
          - name: discovery
            image: ecommerce-discovery
          - name: gateway
            image: ecommerce-gateway
          - name: customer
            image: ecommerce-customer
          - name: Product
            image: ecommerce-product
          - name: order
            image: ecommerce-order
          - name: finances
            image: ecommerce-finances
          - name: notification
            image: ecommerce-notification

    steps:
      - name: 🚚 Checkout Code
        uses: actions/checkout@v3

      - name: 📦 Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🏗️ Build and Push ${{ matrix.service.name }} Service
        working-directory: ./services/${{ matrix.service.name }}
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ matrix.service.image }}:latest .
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ matrix.service.image }}:latest

  deploy:
    needs: build-services
    runs-on: ubuntu-latest
    steps:
      - name: 🚚 Checkout Code
        uses: actions/checkout@v3

      - name: 🛠️ Prepare Remote Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            # Mettre à jour les packages et installer les dépendances
            sudo dnf update -y
            sudo dnf install -y dnf-plugins-core

            # Installer Docker si absent
            if ! command -v docker &> /dev/null; then
              echo "Installation de Docker..."
              sudo dnf config-manager --add-repo=https://download.docker.com/linux/fedora/docker-ce.repo
              sudo dnf install -y docker-ce docker-ce-cli containerd.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi

            # Installer Docker Compose
            if ! command -v docker-compose &> /dev/null; then
              DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
              sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

      - name: 📂 Copy Deployment Files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 
            - docker-compose.yml
            - .env
          target: ${{ secrets.TARGET_DIR }}
          strip_components: 1
          overwrite: true

      - name: 🚀 Deploy Services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            mkdir -p ${{ secrets.TARGET_DIR }}
            cd ${{ secrets.TARGET_DIR }}

            # Vérifier l'existence des fichiers
            [ -f docker-compose.yml ] || { echo "Erreur : docker-compose.yml manquant !"; exit 1; }
            [ -f .env ] || { echo "Avertissement : .env manquant"; }

            # Se connecter à Docker Hub
            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

            # Déploiement
            docker-compose pull || { echo "Erreur lors du pull des images"; exit 1; }
            docker-compose up -d || { echo "Erreur lors du déploiement"; exit 1; }

            # Afficher l'état et les logs
            docker-compose ps
            docker-compose logs --tail=50