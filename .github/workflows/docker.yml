name: üöÄ Build & Deploy Microservices

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üöö Get latest code
        uses: actions/checkout@v3

      - name: üì¶ Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven

      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build Config Server
      - name: üèóÔ∏è Build and push Config Server
        working-directory: ./services/config-server
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-config-server:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-config-server:latest

      # Build Discovery Service
      - name: üèóÔ∏è Build and push Discovery Service
        working-directory: ./services/discovery
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-discovery:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-discovery:latest

      # Build API Gateway
      - name: üèóÔ∏è Build and push API Gateway
        working-directory: ./services/gateway
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-gateway:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-gateway:latest

      # Build Customer Service
      - name: üèóÔ∏è Build and push Customer Service
        working-directory: ./services/customer
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-customer:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-customer:latest

      # Build Product Service
      - name: üèóÔ∏è Build and push Product Service
        working-directory: ./services/Product
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-product:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-product:latest

      # Build Order Service
      - name: üèóÔ∏è Build and push Order Service
        working-directory: ./services/order
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-order:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-order:latest

      # Build Finance Service
      - name: üèóÔ∏è Build and push Finance Service
        working-directory: ./services/finances
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-finances:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-finances:latest

      # Build Notification Service
      - name: üèóÔ∏è Build and push Notification Service
        working-directory: ./services/notification
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-notification:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-notification:latest

    # Pr√©paration du serveur distant avec des v√©rifications am√©lior√©es
      - name: üõ†Ô∏è Prepare Remote Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Activer le mode strict pour les erreurs
            set -e

            # Mise √† jour des paquets avec gestion des erreurs
            sudo apt update -y || { echo "Erreur lors de la mise √† jour des paquets"; exit 1; }

            # Installer les d√©pendances n√©cessaires
            sudo apt install -y apt-transport-https ca-certificates curl software-properties-common || \
            { echo "Erreur lors de l'installation des d√©pendances"; exit 1; }

            # Installation de Docker
            if ! command -v docker &> /dev/null; then
              echo "Installation de Docker..."
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - || \
              { echo "Erreur lors de l'ajout de la cl√© GPG Docker"; exit 1; }
              
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" || \
              { echo "Erreur lors de l'ajout du d√©p√¥t Docker"; exit 1; }
              
              sudo apt update -y
              sudo apt install -y docker-ce docker-ce-cli containerd.io || \
              { echo "Erreur lors de l'installation de Docker"; exit 1; }
              
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi

            # Installation de Docker Compose
            if ! command -v docker-compose &> /dev/null; then
              echo "Installation de Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose || \
              { echo "Erreur lors du t√©l√©chargement de Docker Compose"; exit 1; }
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Installer tar si n√©cessaire
            sudo apt install -y tar

      # Copie s√©curis√©e du docker-compose.yml
      - name: üìÇ Copy docker-compose.yml
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 
            - "./docker-compose.yml"
            - "./.env"  # Ajout optionnel du fichier d'environnement
          target: ${{ secrets.TARGET_DIR }}
          strip_components: 1
          overwrite: true

      # D√©ploiement avec gestion des erreurs
      - name: üöÄ Deploy Services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Mode strict et gestion des erreurs
            set -e

            # Cr√©er le r√©pertoire s'il n'existe pas
            mkdir -p ${{ secrets.TARGET_DIR }}
            cd ${{ secrets.TARGET_DIR }}

            # V√©rifications pr√©alables
            [ -f docker-compose.yml ] || { echo "Erreur : docker-compose.yml manquant !"; exit 1; }

            # Login Docker Hub s√©curis√©
            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin || \
            { echo "Erreur de connexion √† Docker Hub"; exit 1; }

            # Pull et d√©ploiement avec gestion des erreurs
            docker-compose pull || { echo "Erreur lors du pull des images"; exit 1; }
            docker-compose up -d || { echo "Erreur lors du d√©ploiement"; exit 1; }

            # V√©rifications post-d√©ploiement
            docker-compose ps
            docker-compose logs --tail=50