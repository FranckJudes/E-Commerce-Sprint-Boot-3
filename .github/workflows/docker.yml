name: 🚀 Build & Deploy Microservices

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🚚 Get latest code
        uses: actions/checkout@v3

      - name: 📦 Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build Config Server
      - name: 🏗️ Build and push Config Server
        working-directory: ./services/config-server
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-config-server:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-config-server:latest

      # Build Discovery Service
      - name: 🏗️ Build and push Discovery Service
        working-directory: ./services/discovery
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-discovery:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-discovery:latest

      # Build API Gateway
      - name: 🏗️ Build and push API Gateway
        working-directory: ./services/gateway
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-gateway:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-gateway:latest

      # Build Customer Service
      - name: 🏗️ Build and push Customer Service
        working-directory: ./services/customer
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-customer:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-customer:latest

      # Build Product Service
      - name: 🏗️ Build and push Product Service
        working-directory: ./services/Product
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-product:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-product:latest

      # Build Order Service
      - name: 🏗️ Build and push Order Service
        working-directory: ./services/order
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-order:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-order:latest

      # Build Finance Service
      - name: 🏗️ Build and push Finance Service
        working-directory: ./services/finances
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-finances:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-finances:latest

      # Build Notification Service
      - name: 🏗️ Build and push Notification Service
        working-directory: ./services/notification
        run: |
          ./mvnw clean package -DskipTests
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-notification:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-notification:latest

      # Préparation du serveur distant
      - name: 🛠️ Prepare Remote Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            # Mise à jour et installation des dépendances
            sudo dnf update -y
            sudo dnf install -y dnf-plugins-core curl tar

            # Installer Docker si absent
            if ! command -v docker &> /dev/null; then
              echo "Installation de Docker..."
              sudo dnf config-manager --add-repo=https://download.docker.com/linux/fedora/docker-ce.repo
              sudo dnf install -y docker-ce docker-ce-cli containerd.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi

            # Installer Docker Compose
            if ! command -v docker-compose &> /dev/null; then
              echo "Installation de Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

      # Copier docker-compose.yml et .env
      - name: 📂 Copy docker-compose.yml
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 
            - docker-compose.yml
            - .env
          target: ${{ secrets.TARGET_DIR }}
          strip_components: 1
          overwrite: true

      # Déploiement sur le serveur distant
      - name: 🚀 Deploy Services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            mkdir -p ${{ secrets.TARGET_DIR }}
            cd ${{ secrets.TARGET_DIR }}

            [ -f docker-compose.yml ] || { echo "Erreur : docker-compose.yml manquant !"; exit 1; }

            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

            docker compose pull || { echo "Erreur lors du pull des images"; exit 1; }
            docker compose up -d || { echo "Erreur lors du déploiement"; exit 1; }

            docker compose ps
            docker compose logs --tail=50